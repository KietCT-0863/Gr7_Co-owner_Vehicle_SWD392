@page
@model Co_owner_Vehicle.Pages.Reports.FinancialModel
@{
    ViewData["Title"] = "Báo cáo tài chính";
}

<!-- Page Header -->
<div class="d-flex justify-content-between align-items-center mb-4">
    <div>
        <h2 class="fw-bold mb-1">
            <i class="bi bi-graph-up text-primary me-2"></i>Báo cáo tài chính
        </h2>
        <p class="text-muted mb-0">Phân tích chi phí và thanh toán theo thời gian</p>
    </div>
    <div class="btn-group">
        <button class="btn btn-outline-primary">
            <i class="bi bi-file-earmark-pdf me-2"></i>Xuất PDF
        </button>
        <button class="btn btn-outline-success">
            <i class="bi bi-file-earmark-excel me-2"></i>Xuất Excel
        </button>
        <button class="btn btn-primary">
            <i class="bi bi-printer me-2"></i>In
        </button>
    </div>
</div>

<!-- Report Period Selection -->
<div class="card mb-4">
    <div class="card-body">
        <div class="row g-3 align-items-end">
            <div class="col-md-3">
                <label class="form-label small">Loại báo cáo</label>
                <select class="form-select">
                    <option selected>Tổng quan</option>
                    <option>Theo xe</option>
                    <option>Theo nhóm</option>
                    <option>Theo người dùng</option>
                </select>
            </div>
            <div class="col-md-2">
                <label class="form-label small">Khoảng thời gian</label>
                <select class="form-select">
                    <option>Tuần này</option>
                    <option selected>Tháng này</option>
                    <option>Quý này</option>
                    <option>Năm nay</option>
                    <option>Tùy chỉnh</option>
                </select>
            </div>
            <div class="col-md-3">
                <label class="form-label small">Từ ngày</label>
                <input asp-for="From" type="date" class="form-control">
            </div>
            <div class="col-md-3">
                <label class="form-label small">Đến ngày</label>
                <input asp-for="To" type="date" class="form-control">
            </div>
            <div class="col-md-1">
                <button class="btn btn-primary w-100">
                    <i class="bi bi-search"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<!-- Summary Overview -->
<div class="row g-3 mb-4">
    <div class="col-md-3">
        <div class="stat-card">
            <div class="stat-card-icon danger">
                <i class="bi bi-arrow-up-circle"></i>
            </div>
            <div class="stat-card-value">@Model.TotalExpenses.ToString("#,##0")</div>
            <div class="stat-card-label">Tổng chi phí</div>
            <div class="stat-card-change negative">
                <i class="bi bi-arrow-down"></i> -8% so tháng trước
            </div>
        </div>
    </div>
    
    <div class="col-md-3">
        <div class="stat-card">
            <div class="stat-card-icon success">
                <i class="bi bi-arrow-down-circle"></i>
            </div>
            <div class="stat-card-value">@Model.TotalPayments.ToString("#,##0")</div>
            <div class="stat-card-label">Đã thanh toán</div>
            <div class="stat-card-change positive">
                @{ var paidPct = Model.TotalExpenses > 0 ? (int)Math.Round((double)(Model.TotalPayments / Model.TotalExpenses * 100)) : 0; }
                <i class="bi bi-check-circle"></i> @paidPct% đã trả
            </div>
        </div>
    </div>
    
    <div class="col-md-3">
        <div class="stat-card">
            <div class="stat-card-icon warning">
                <i class="bi bi-exclamation-circle"></i>
            </div>
            @{ var debt = Model.TotalExpenses - Model.TotalPayments; }
            <div class="stat-card-value">@debt.ToString("#,##0")</div>
            <div class="stat-card-label">Công nợ</div>
            <div class="stat-card-change">
                @{ var debtPct = Model.TotalExpenses > 0 ? (int)Math.Round((double)(debt / Model.TotalExpenses * 100)) : 0; }
                <i class="bi bi-clock-history"></i> @debtPct% chưa trả
            </div>
        </div>
    </div>
    
    <div class="col-md-3">
        <div class="stat-card">
            <div class="stat-card-icon primary">
                <i class="bi bi-graph-up"></i>
            </div>
            @{ var months = 0; if (Model.From.HasValue && Model.To.HasValue) { var a = Model.From.Value; var b = Model.To.Value; months = ((b.Year * 12 + b.Month) - (a.Year * 12 + a.Month)) + 1; } var avg = months > 0 ? Model.TotalExpenses / months : 0; }
            <div class="stat-card-value">@avg.ToString("#,##0")</div>
            <div class="stat-card-label">Trung bình/tháng</div>
            <div class="stat-card-change">
                <i class="bi bi-info-circle"></i> 6 tháng gần nhất
            </div>
        </div>
    </div>
</div>

<div class="row g-4">
    <!-- Charts Column -->
    <div class="col-lg-8">
        <!-- Expense Trend Chart -->
        <div class="card mb-4">
            <div class="card-header">
                <i class="bi bi-graph-up-arrow me-2"></i>Xu hướng chi phí
            </div>
            <div class="card-body">
                <canvas id="expenseTrendChart" height="100"></canvas>
            </div>
        </div>

        <!-- Expense by Category -->
        <div class="card">
            <div class="card-header">
                <i class="bi bi-pie-chart me-2"></i>Chi phí theo danh mục
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-md-6">
                        <canvas id="categoryPieChart"></canvas>
                    </div>
                    <div class="col-md-6">
                        <div class="category-list">
                            @{ var total = Model.ExpensesByCategory.Values.Sum(); var colors = new [] { "#4F46E5", "#10B981", "#F59E0B", "#EF4444", "#06b6d4", "#8b5cf6" }; var idx = 0; }
                            @foreach (var item in Model.ExpensesByCategory.OrderByDescending(kv => kv.Value))
                            {
                                var pct = total > 0 ? Math.Round(item.Value * 100 / total, 1) : 0;
                                var color = colors[idx++ % colors.Length];
                                <div class="d-flex justify-content-between align-items-center mb-3 pb-3 border-bottom">
                                    <div class="d-flex align-items-center gap-2">
                                        <div class="category-dot" style="background: @color;"></div>
                                        <span>@item.Key</span>
                                    </div>
                                    <div class="text-end">
                                        <strong>@item.Value.ToString("#,##0")</strong><br>
                                        <small class="text-muted">@pct%</small>
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Right Sidebar -->
    <div class="col-lg-4">
        <!-- Top Expenses -->
        <div class="card mb-4">
            <div class="card-header">
                <i class="bi bi-star me-2"></i>Chi phí cao nhất
            </div>
            <div class="card-body">
                @if (Model.TopExpenses.Any())
                {
                    foreach (var e in Model.TopExpenses)
                    {
                        <div class="mb-3 pb-3 border-bottom">
                            <div class="d-flex justify-content-between align-items-start mb-2">
                                <strong>@(e.ExpenseCategory?.CategoryName ?? "Chi phí")</strong>
                                <span class="badge bg-secondary">@e.ExpenseDate.ToLocalTime().ToString("dd/MM/yyyy")</span>
                            </div>
                            <div class="d-flex justify-content-between">
                                <small class="text-muted">@(e.Vehicle != null ? e.Vehicle.Brand + " " + e.Vehicle.Model : "Không rõ xe")</small>
                                <strong>@e.Amount.ToString("#,##0")</strong>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="text-muted">Không có dữ liệu</div>
                }
            </div>
        </div>

        <!-- Expense by Vehicle -->
        <div class="card">
            <div class="card-header">
                <i class="bi bi-car-front me-2"></i>Chi phí theo xe
            </div>
            <div class="card-body">
                @{
                    var totalByVehicle = Model.ExpensesByVehicle.Values.Sum();
                    var vehicleIdx = 0;
                    var vehicleColors = new [] { "primary", "success", "warning", "info", "secondary" };
                }
                @if (totalByVehicle == 0)
                {
                    <div class="text-muted">Không có dữ liệu</div>
                }
                else
                {
                    foreach (var kv in Model.ExpensesByVehicle.OrderByDescending(k => k.Value))
                    {
                        var pct = totalByVehicle > 0 ? (int)Math.Round(kv.Value * 100 / totalByVehicle) : 0;
                        var color = vehicleColors[vehicleIdx++ % vehicleColors.Length];
                        <div class="mb-3">
                            <div class="d-flex justify-content-between mb-2">
                                <span>@kv.Key</span>
                                <strong class="text-@color">@kv.Value.ToString("#,##0")</strong>
                            </div>
                            <div class="progress" style="height: 8px;">
                                <div class="progress-bar bg-@color" style="width: @pct%"></div>
                            </div>
                            <small class="text-muted">@pct% tổng chi phí</small>
                        </div>
                    }
                }
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        // Expense Trend Chart
        const trendCtx = document.getElementById('expenseTrendChart').getContext('2d');
        new Chart(trendCtx, {
            type: 'line',
            data: {
                labels: ['Tháng 5', 'Tháng 6', 'Tháng 7', 'Tháng 8', 'Tháng 9', 'Tháng 10'],
                datasets: [{
                    label: 'Chi phí',
                    data: [3200000, 4100000, 3800000, 4500000, 3900000, 4200000],
                    borderColor: '#4F46E5',
                    backgroundColor: 'rgba(79, 70, 229, 0.1)',
                    tension: 0.4,
                    fill: true
                }, {
                    label: 'Thanh toán',
                    data: [3200000, 3900000, 3800000, 4200000, 3500000, 3800000],
                    borderColor: '#10B981',
                    backgroundColor: 'rgba(16, 185, 129, 0.1)',
                    tension: 0.4,
                    fill: true
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: {
                        position: 'top',
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            callback: function(value) {
                                return value.toLocaleString('vi-VN') + '₫';
                            }
                        }
                    }
                }
            }
        });

        // Category Pie Chart
        const pieCtx = document.getElementById('categoryPieChart').getContext('2d');
        const categoryLabels = [
            @for (int i = 0; i < Model.ExpensesByCategory.Count; i++) {
                var key = Model.ExpensesByCategory.ElementAt(i).Key;
                @: '@key'@((i < Model.ExpensesByCategory.Count - 1) ? "," : string.Empty)
            }
        ];
        const categoryData = [
            @for (int i = 0; i < Model.ExpensesByCategory.Count; i++) {
                var val = Model.ExpensesByCategory.ElementAt(i).Value;
                @: @val@((i < Model.ExpensesByCategory.Count - 1) ? "," : string.Empty)
            }
        ];
        const palette = ['#4F46E5','#10B981','#F59E0B','#EF4444','#06b6d4','#8b5cf6'];
        new Chart(pieCtx, {
            type: 'doughnut',
            data: {
                labels: categoryLabels,
                datasets: [{
                    data: categoryData.length ? categoryData : [1],
                    backgroundColor: categoryLabels.map((_, idx) => palette[idx % palette.length]),
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                plugins: {
                    legend: { position: 'bottom' }
                }
            }
        });
    </script>
}

